{
   "Arcane Node": {
      "prefix": ["!Node"],
      "body": [
         "import { memo } from \"react\";",
         "import ArcaneGraph from \"../graph\";",
         "import { IArcaneGraph, INodeDefinition, INodeHelper, NodeTypes } from \"../types\";",
         "import MathHelper from \"!/utility/mathhelper\";",
         "",
         "import { $12 as nodeIcon } from \"@fortawesome/pro-solid-svg-icons\";",
         "import { $12 as buttonIcon } from \"@fortawesome/pro-light-svg-icons\";",
         "",
         "interface I$1 extends INodeDefinition {",
         "  inputs: {",
         "     $8",
         "  };",
         "  outputs: {",
         "     $9",
         "  };",
         "  values: {",
         "     $10",
         "  };",
         "}",
         "",
         "const nodeHelper = ArcaneGraph.nodeHooks<I$1>();",
         "",
         "const Controls = memo(({ nodeId } : { nodeId: string}) => {",
         "  ",
         "  return (<BaseNode<I$1> nodeId={nodeId} helper={$1}>",
         "     $14",
         "  </BaseNode>)",
         "})",
         "",
         "const getOutput = (graph: IArcaneGraph, nodeId: string, socket: keyof I$1[\"outputs\"]) => {",
         "  $13",
         "}",
         "",
         "const nodeMethods = ArcaneGraph.nodeMethods<I$1>();",
         "",
         "const $1Helper: INodeHelper<I$1> = {",
         "  name: \"$5\",",
         "  buttonIcon,",
         "  nodeIcon,",
         "  flavour: \"$6\",",
         "  type: NodeTypes.$7,",
         "  getOutput,",
         "  initialize: () => ({",
         "     $11",
         "  }),",
         "  controls: Controls,",
         "};",
         "",
         "export default $1Helper;"
      ]
   },

   "Arcane Shape Node": {
      "prefix": ["!NodeShape"],
      "body": [
         "import { memo } from \"react\";",
         "import ArcaneGraph from \"../graph\";",
         "import { IArcaneGraph, INodeDefinition, INodeHelper, NodeTypes } from \"../types\";",
         "import MathHelper from \"!/utility/mathhelper\";",
         "",
         "import { $12 as nodeIcon } from \"@fortawesome/pro-solid-svg-icons\";",
         "import { $12 as buttonIcon } from \"@fortawesome/pro-light-svg-icons\";",
         "",
         "interface I$1 extends INodeDefinition {",
         "  inputs: {",
         "     $8",
         "  };",
         "  outputs: {",
         "     $9",
         "  };",
         "  values: {",
         "     $10",
         "  };",
         "}",
         "",
         "const nodeHelper = ArcaneGraph.nodeHooks<I$1>();",
         "",
         "const Controls = memo(({ nodeId } : { nodeId: string }) => {",
         "  ",
         "  return (<>",
         "     $13",
         "  </>)",
         "})",
         "",
         "const Renderer = memo(({ nodeId }: { nodeId: string }) => {",
         "  ",
         "  return (<>",
         "     $14",
         "  </>)",
         "})",
         "",
         "const nodeMethods = ArcaneGraph.nodeMethods<I$1>();",
         "",
         "const $1Helper: INodeHelper<I$1> = {",
         "  name: \"$5\",",
         "  buttonIcon,",
         "  nodeIcon,",
         "  flavour: \"$6\",",
         "  type: NodeTypes.$7,",
         "  getOutput: (graph: IArcaneGraph, nodeId: string, socket: keyof I$1[\"outputs\"]) => {",
         "     if (socket === \"output\") {",
         "        return Renderer;",
         "     }",
         "",
         "     $15",
         "  },",
         "  initialize: () => ({",
         "     $11",
         "  }),",
         "  controls: Controls,",
         "};",
         "",
         "export default $1Helper;"
      ]
   },

   "Arcane Node Hook - useCoalesce": {
      "prefix": ["!coalesce"],
      "body": ["const $1 = nodeHelper.useCoalesce(nodeId, \"$1\", \"$1\");"]
   },

   "Arcane Node Hook - useValueState": {
      "prefix": ["!valueState"],
      "body": ["const [$1, set${1/(.*)/${1:/capitalize}/}] = nodeHelper.useValueState(nodeId, \"$1\");"]
   },

   "Arcane Node Hook - useValue": {
      "prefix": ["!value"],
      "body": ["const $1 = nodeHelper.useValue(nodeId, \"$1\");"]
   },

   "Arcane Node Hook - useHasLink": {
      "prefix": ["!hasLink"],
      "body": ["const has${1/(.*)/${1:/capitalize}/} = nodeHelper.useHasLink(nodeId, \"$1\");"]
   }
}
